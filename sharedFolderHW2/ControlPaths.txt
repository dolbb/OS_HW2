Control paths:
This document describes the control paths related to SCHED_SHORT policy (call stack + desired action)

---------------------------------------------------------------------------

Other to Short:

	sched_setscheduler		(Other_PID, SCHED_SHORT, requested_time_param)
	sys_sched_setscheduler	(Other_PID, SCHED_SHORT, requested_time_param)
	setscheduler			(Other_PID, SCHED_SHORT, requested_time_param)
		-	Verify p is SCHED_OTHER
		-	Verify requested_time >= 1
		-	Verify requested_time <= MAX_SHORT_TIME
		-	Verify user rights - current is root or same user as Other_PID
		-	Updates task_struct fields:	policy, requestedTime, iWasShort, prio, 
		retval
		-	Moves process to active->queue[static_prio]
		-	Updates bitmap and bitmap_short

---------------------------------------------------------------------------

Short to short:

	sys_sched_setparam(Short_PID, SCHED_SHORT, requested_time_param)
	setscheduler(Short_PID, -1, requested_time_param)
		-	Verify p is SCHED_SHORT
		-	Verify requested_time > actual running time
		-	TODO: ?? need to get to end of list in the same cell ??? 
		-	The rest is same as Other to Short

---------------------------------------------------------------------------

Short to overdue:
	
	timer interrupt (Not important to us)
	update_process_times (Not important to us)
	scheduler_tick()
		-	raises need_resched (time_slice ended)
		-	verify SCHED_SHORT
		-	verify iAmOverdue = false = 0
		-	update iAmOverdue = true = 1
		-	time_slice = TASK_TIMESLICE (AFTER! setting iAmOverdue)
		-	move from queue to END of "overdue_short" (instead of enqueue_task)

---------------------------------------------------------------------------

Overdue to Other:

	timer interrupt (Not important to us)
	update_process_times (Not important to us)
	scheduler_tick()
		-	verify SCHED_SHORT
		-	verify iAmOverdue = true = 1 
		-	verify time_slice = 0
		-	update iAmOverdue = false = 0
		-	update iWasShort = true = 1	(not in setscheduler)
		-	raises need_resched (time_slice ended)
		-	time_slice = TASK_TIMESLICE (AFTER! setting iAmOverdue??)
		-	delete from list and move to expired (only other) queue.

---------------------------------------------------------------------------

Short receives clock interrupt:

	timer interrupt (Not important to us)
	update_process_times (Not important to us)
	scheduler_tick()
		-	verify SCHED_SHORT
		-	check time_slice
			-	case == 0 - get to "Short to overdue" phase and up the need_resched flag.
			-	case != 0 - check the need_resched flag:
				-	case 0: Updates time_slice--
				-	case 1: need_resched = 0?, and call schedule to switch.

---------------------------------------------------------------------------

Overdue receives clock interrupt:

	timer interrupt (Not important to us)
	update_process_times (Not important to us)
	scheduler_tick()
		-	Updates sleep_avg
		-	Updates time_slice
	
		-	verify SCHED_SHORT
		-	check time_slice
			-	case == 0 - get to "overdue to other" phase and up the need_resched flag.
			-	case != 0 - check the need_resched flag:
				-	case 0: Updates time_slice--
							Updates sleep_avg??
				-	case 1: need_resched = 0?, and call schedule to switch.
		
--------------------------------------------------------------------------

Short is running and another process returned from waiting:

	An interrupt raises need_resched
	timer interrupt (Not important to us)
	update_process_times (Not important to us)
	scheduler_tick()
	schedule()
		-	check for first bit in active bitmap
			-	if <100 its RT, switch and store short in active[static_prio]
			-	if >100 check in short bitmap:
				-	if first bit == current->static_prio - do nothing
				-	if first bit <= current->static_prio - switch them

---------------------------------------------------------------------------

Overdue is running and another process returned from waiting:
	
	An interrupt raises need_resched
	
	same as above when short runs while the interupt occures.
	now we know a switch is needed, need to just check to whom
	-	same checks and afterwards - check in the active bitmap for anyone >100 (others) 
	-	if nothing - check expired bitmap (expired others) since we are in a short process.

---------------------------------------------------------------------------

Short sched_yield:

	sys_sched_yield()
		__clear_bit()
		sched_find_first_bit(array->bitmap)
		__set_bit
	schedule()

---------------------------------------------------------------------------
	
Overdue sched_yield:
	
---------------------------------------------------------------------------

Short forks:

---------------------------------------------------------------------------

Overdue forks:

---------------------------------------------------------------------------
===========================================================================
							NOT SURE IF NEEDED:
===========================================================================
---------------------------------------------------------------------------

Short becomes TASK_(UN)INTERRUPTIBLE :

	sleep_on()
		-	Changes state to TASK_(UN)INTERRUPTIBLE
		-	Enters to waiting list
	schedule()
		-	Finds next process to run
		-	... (waits)
		-	Removes itseld from waiting list
	
---------------------------------------------------------------------------

Overdue becomes TASK_(UN)INTERRUPTIBLE :

---------------------------------------------------------------------------
